{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-BoldOblique;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\tx720\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf0 Const PI = 3.14\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is the difference between 
\f1\i\b var
\f0\i0\b0  and 
\f1\i\b let
\f0\i0\b0 ?\uc0\u8232 VAR lets you reassign and redeclare, but you can not redeclare using LET.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is the difference between 
\f1\i\b var
\f0\i0\b0  and 
\f1\i\b const
\f0\i0\b0 ?\uc0\u8232 You 
\f2\b cannot
\f0\b0  redeclare or reassign using the 
\f1\i\b const
\f0\i0\b0  keyword.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is the difference between 
\f1\i\b let
\f0\i0\b0  and 
\f1\i\b const
\f0\i0\b0 ?\uc0\u8232 You can reassign with 
\f1\i\b let
\f0\i0\b0 , but you can not redeclare or reassign using the 
\f1\i\b const
\f0\i0\b0  keyword.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
What is hoisting?\uc0\u8232 It\'92s the way that we explain how the JS compiler works. Variables are lifting or \'93hoisted\'94 to the top of the scope they are declared in. When using 
\f1\i\b var
\f0\i0\b0 , you can access the variable name and it\'92s undefined value before it is used later on.\uc0\u8232 Function declarations are also hoisted and can be invoked \'93before\'94 they are defined in a codebase.}